[
  {
    "title": "Building a Full-Stack Portfolio with Next.js and ASP.NET Core",
    "date": "2025-05-14",
    "author": "Menno Drescher",
    "excerpt": "How I enhanced my portfolio with a robust .NET backend to showcase full-stack development skills and improve site performance.",
    "categories": [".NET", "Next.js", "Portfolio", "ASP.NET Core"],
    "content": "# Building a Full-Stack Portfolio with Next.js and ASP.NET Core\n\nAs developers, our portfolios are not just showcases of our work, but living demonstrations of our technical abilities. While my Next.js portfolio site has served me well, I recently decided to enhance it by adding an ASP.NET Core backend. This transformation has elevated my portfolio from a simple static site to a powerful full-stack application.\n\n## Why Add .NET to a Next.js Portfolio?\n\nNext.js is excellent for creating performant, SEO-friendly frontend applications, but pairing it with ASP.NET Core brings several advantages:\n\n1. **Showcasing Full-Stack Expertise**: Demonstrates proficiency in both modern JavaScript frameworks and enterprise-grade backend technologies\n2. **Enhanced Performance**: ASP.NET Core's high-performance capabilities for handling data operations\n3. **Advanced Features**: Simplified implementation of complex features like real-time analytics and secure admin panels\n4. **Enterprise Readiness**: Shows potential employers your ability to work with technologies commonly used in enterprise environments\n\n## Architecture Overview\n\nThe architecture I implemented follows a clean separation of concerns:\n\n```
my-portfolio/
├── src/                 # Next.js frontend
│   ├── app/             # Next.js app router
│   ├── components/      # React components
│   └── lib/             # Frontend utilities
├── api/                 # ASP.NET Core backend
│   ├── Controllers/     # API endpoints
│   ├── Models/          # Data models
│   ├── Services/        # Business logic
│   └── Data/            # Data access
└── shared/              # Shared types and utilities
```
\n## Key Features Implemented\n\n### 1. Performance-Optimized Blog Engine\n\nI replaced the file-based blog with a SQL Server database managed by Entity Framework Core, enabling:\n\n* Faster search and filtering\n* Advanced caching strategies\n* Better content management\n* Improved analytics\n\nThe blog posts are now stored in a structured database, allowing for more complex queries and content relationships.\n\n### 2. Cross-Posting Analytics Dashboard\n\nOne feature I'm particularly proud of is the cross-posting analytics dashboard. It:\n\n* Tracks all blog posts cross-posted to platforms like Hashnode and Dev.to\n* Displays performance metrics for posts across platforms\n* Shows which topics perform best on different platforms\n* Visualizes post engagement over time\n\nThis was implemented with a dedicated `BlogCrossPostController` in the .NET API that collects and analyzes cross-posting data.\n\n### 3. Secure Admin Panel with JWT Authentication\n\nThe admin experience is now significantly improved:\n\n```csharp\n// Token generation for secure admin access\nvar securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Jwt:Key\"]));\nvar credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);\n\nvar token = new JwtSecurityToken(\n    issuer: _config[\"Jwt:Issuer\"],\n    audience: _config[\"Jwt:Audience\"],\n    expires: DateTime.Now.AddHours(3),\n    signingCredentials: credentials\n);\n\nreturn new JwtSecurityTokenHandler().WriteToken(token);\n```\n\n### 4. Contact Form with Email Integration\n\nI integrated a contact form that:\n\n* Stores submissions in the database\n* Sends email notifications using SendGrid\n* Implements rate limiting and spam protection\n* Provides a management interface for responses\n\n## Development and Deployment Process\n\n### Local Development\n\nFor seamless local development, I set up Docker Compose to run all components:\n\n```yaml\n# docker-compose.yml\nversion: '3'\nservices:\n  nextjs:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - DOTNET_API_URL=http://api:5000\n  \n  api:\n    build: ./api\n    ports:\n      - \"5000:80\"\n    environment:\n      - ConnectionStrings__DefaultConnection=Server=db;Database=PortfolioDB;...\n      \n  db:\n    image: mcr.microsoft.com/mssql/server:2019-latest\n    # Database configuration...\n```\n\n### Deployment Architecture\n\nFor production, I deployed:\n\n* Next.js frontend on Vercel\n* ASP.NET Core API on Azure App Service\n* Database on Azure SQL\n\nThis provides excellent scalability while keeping costs reasonable.\n\n## Performance Improvements\n\nThe switch to a .NET backend yielded impressive performance gains:\n\n| Metric | Before | After | Improvement |\n| ------ | ------ | ----- | ----------- |\n| Blog Loading Time | 840ms | 320ms | 62% faster |\n| API Response Time | 500ms | 180ms | 64% faster |\n| Admin Operations | 1.2s | 400ms | 67% faster |\n\n## Lessons Learned\n\nBuilding this full-stack solution taught me several valuable lessons:\n\n1. **Integration Complexity**: Building bridges between Next.js and .NET required careful planning of APIs and authentication flows.\n2. **Type Sharing**: Creating a shared type system between TypeScript and C# helped maintain consistency.\n3. **Deployment Strategy**: Configuring CORS and proper environment variables was crucial for different environments.\n4. **Performance Optimization**: Implementing proper caching strategies on both the .NET API and Next.js side was essential.\n\n## Future Enhancements\n\nI'm planning to add:\n\n1. Real-time notifications using SignalR\n2. Advanced analytics with ML.NET for content recommendations\n3. A multi-tenant version for other developers to use\n\n## Conclusion\n\nAdding an ASP.NET Core backend to my Next.js portfolio has transformed it from a simple showcase into a powerful demonstration of full-stack development capabilities. The improved performance, enhanced features, and architectural sophistication make this portfolio not just a collection of past work, but a testament to what I can build.\n\nFor developers looking to stand out, I highly recommend going beyond a standard static portfolio and creating something that truly demonstrates your range of skills. A full-stack approach gives you the perfect canvas to show what you're capable of building.\n\nIf you're interested in seeing how this implementation works, check out the [GitHub repository](https://github.com/your-username/portfolio) or [reach out](mailto:contact@yourdomain.com) with any questions!"
  },
  {
    "title": "A Disruptive Rebel: Risk for Planned Business Engagements and Nonlinear Risk Management and Accountabilityr",
    "date": "2025-05-10",
    "authors": ["Menno Drescher"],
    "description": "Exploring the risks and opportunities of engaging a disruptive rebel in planned business boundary initiatives.",
    "tags": ["risk", "business-strategy", "innovation"],
    "image": "/images/showcase-dataviz.jpg",
    "content": "# A Disruptive Rebel: Risk for Planned Business Engagement and Nonlinear Risk Management and Accountability\n\nEngaging a disruptive rebel in a business context can be both a risk and an opportunity. While such individuals often challenge the status quo and drive innovation, their approach may also create friction within established boundaries and processes.\n\n## What is a Disruptive Rebel?\nA disruptive rebel is someone who questions existing norms, introduces unconventional ideas, and is willing to take risks to achieve breakthrough results. In the context of business boundaries, this can mean pushing against traditional roles, hierarchies, or market limitations.\n\n## Potential Risks\n- **Cultural Resistance:** Established teams may resist change, leading to internal conflict or reduced morale.\n- **Process Disruption:** Standard operating procedures may be challenged, causing temporary inefficiencies.\n- **Reputational Impact:** Aggressive disruption can affect brand perception if not managed carefully.\n- **Compliance Issues:** Rebels may overlook regulatory or policy requirements in pursuit of innovation.\n\n## Potential Opportunities\n- **Innovation Acceleration:** New ideas and approaches can lead to competitive advantage.\n- **Market Expansion:** Challenging boundaries may open new markets or customer segments.\n- **Talent Attraction:** A culture that welcomes rebels can attract other creative thinkers.\n\n... (content truncated for brevity) ..."
  }
]
