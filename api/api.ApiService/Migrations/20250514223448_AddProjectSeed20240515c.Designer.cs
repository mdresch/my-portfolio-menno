// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioApi.Data;

#nullable disable

namespace PortfolioApi.Migrations
{
    [DbContext(typeof(PortfolioContext))]
    [Migration("20250514223448_AddProjectSeed20240515c")]
    partial class AddProjectSeed20240515c
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PortfolioApi.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategoriesJson")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Excerpt")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Summary")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsPublished");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("BlogPosts", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("BlogPostsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Menno",
                            CategoriesJson = "[\"Web Development\", \"Next.js\", \"ASP.NET Core\"]",
                            Content = "# Building a Full-Stack Portfolio\n\nIn this article, I'll walk through the process of building a modern portfolio website using Next.js and ASP.NET Core...",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Excerpt = "Learn how to create a modern portfolio website using Next.js for the frontend and ASP.NET Core for the backend API.",
                            IsPublished = false,
                            Published = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "building-full-stack-portfolio-nextjs-aspnet-core",
                            Title = "Building a Full-Stack Portfolio with Next.js and ASP.NET Core",
                            Updated = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Author = "Menno",
                            CategoriesJson = "[\"Security\", \"ASP.NET Core\", \"API Development\"]",
                            Content = "# JWT Authentication in ASP.NET Core\n\nJSON Web Tokens (JWT) provide a compact and self-contained way to securely transmit information between parties...",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Excerpt = "A comprehensive guide to implementing JWT authentication in your ASP.NET Core API.",
                            IsPublished = false,
                            Published = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "getting-started-jwt-authentication-aspnet-core",
                            Title = "Getting Started with JWT Authentication in ASP.NET Core",
                            Updated = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PortfolioApi.Models.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsRead");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("PortfolioApi.Models.CrossPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CrossPostedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CrossPostedUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("Platform", "PublishedAt");

                    b.ToTable("CrossPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogPostId = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CrossPostedAt = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CrossPostedUrl = "https://medium.com/@yourusername/building-full-stack-portfolio-nextjs-aspnet-core",
                            Platform = "Medium",
                            PublishedAt = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Published"
                        },
                        new
                        {
                            Id = 2,
                            BlogPostId = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CrossPostedAt = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CrossPostedUrl = "https://dev.to/yourusername/building-full-stack-portfolio-nextjs-aspnet-core",
                            Platform = "Dev.to",
                            PublishedAt = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Published"
                        });
                });

            modelBuilder.Entity("PortfolioApi.Models.CrossPostStatistics", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastCrossPostedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalCrossPosts")
                        .HasColumnType("int");

                    b.HasIndex("Platform")
                        .IsUnique();

                    b.ToTable((string)null);

                    b.ToView("vw_CrossPostStatistics", (string)null);
                });

            modelBuilder.Entity("PortfolioApi.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("LiveUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("TechnologiesJson")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsFeatured");

                    b.ToTable("Projects");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("ProjectsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2025, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "My personal portfolio website built with Next.js and ASP.NET Core",
                            DisplayOrder = 0,
                            GitHubUrl = "https://github.com/yourusername/my-portfolio-menno",
                            ImageUrl = "/images/showcase-dataviz.jpg",
                            IsFeatured = false,
                            LiveUrl = "https://your-portfolio-url.com",
                            TechnologiesJson = "[\"Next.js\", \"React\", \"TypeScript\", \"ASP.NET Core\", \"Entity Framework Core\", \"SQL Server\"]",
                            Title = "Portfolio Website"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Interactive dashboard for visualizing complex datasets with customizable charts and filters",
                            DisplayOrder = 0,
                            GitHubUrl = "https://github.com/yourusername/data-viz-dashboard",
                            ImageUrl = "/images/projects/data-dashboard.jpg",
                            IsFeatured = false,
                            LiveUrl = "https://data-dashboard-demo.com",
                            TechnologiesJson = "[\"D3.js\", \"React\", \"TypeScript\", \"Node.js\", \"Express\", \"MongoDB\"]",
                            Title = "Data Visualization Dashboard"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A tool that uses AI to generate blog content, social media posts, and marketing copy",
                            DisplayOrder = 0,
                            GitHubUrl = "https://github.com/yourusername/ai-content-gen",
                            ImageUrl = "/images/projects/ai-generator.jpg",
                            IsFeatured = false,
                            LiveUrl = "https://ai-content-generator.com",
                            TechnologiesJson = "[\"Python\", \"Flask\", \"TensorFlow\", \"React\", \"OpenAI API\", \"PostgreSQL\"]",
                            Title = "AI Content Generator"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A sample project demonstrating best practices for integrating ASP.NET Core with Azure SQL Database, including migrations, health checks, and CI/CD.",
                            DisplayOrder = 0,
                            GitHubUrl = "https://github.com/yourusername/azure-sql-integration-demo",
                            ImageUrl = "/images/projects/azure-sql-demo.jpg",
                            IsFeatured = false,
                            LiveUrl = "https://azure-sql-demo.com",
                            TechnologiesJson = "[\"ASP.NET Core\", \"Azure SQL\", \"Entity Framework Core\", \"GitHub Actions\"]",
                            Title = "Azure SQL Integration Demo"
                        });
                });

            modelBuilder.Entity("PortfolioApi.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Frontend",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconUrl = "/icons/react.svg",
                            Name = "React",
                            ProficiencyLevel = 5,
                            YearsOfExperience = 0
                        },
                        new
                        {
                            Id = 2,
                            Category = "Backend",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconUrl = "/icons/dotnet.svg",
                            Name = "ASP.NET Core",
                            ProficiencyLevel = 5,
                            YearsOfExperience = 0
                        },
                        new
                        {
                            Id = 3,
                            Category = "Languages",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconUrl = "/icons/typescript.svg",
                            Name = "TypeScript",
                            ProficiencyLevel = 4,
                            YearsOfExperience = 0
                        },
                        new
                        {
                            Id = 4,
                            Category = "Databases",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconUrl = "/icons/sql-server.svg",
                            Name = "SQL Server",
                            ProficiencyLevel = 4,
                            YearsOfExperience = 0
                        });
                });

            modelBuilder.Entity("PortfolioApi.Models.CrossPost", b =>
                {
                    b.HasOne("PortfolioApi.Models.BlogPost", "BlogPost")
                        .WithMany("CrossPosts")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("PortfolioApi.Models.BlogPost", b =>
                {
                    b.Navigation("CrossPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
